// ðŸ”¹ SimulaÃ§Ã£o de Interface usando um Mixin
const IConta = {
    depositar(valor) {
        throw new Error("MÃ©todo 'depositar' deve ser implementado.");
    },
    sacar(valor) {
        throw new Error("MÃ©todo 'sacar' deve ser implementado.");
    },
    verSaldo() {
        throw new Error("MÃ©todo 'verSaldo' deve ser implementado.");
    }
};

// ðŸ”¹ Classe Base ContaBancaria
class ContaBancaria {
    // ðŸ”¹ Propriedades privadas com #
    #saldo;

    // ðŸ”¹ Propriedade protegida (por convenÃ§Ã£o, nÃ£o Ã© 100% segura)
    _tipoConta;

    // ðŸ”¹ Usando Symbol para criar um identificador privado
    static #idConta = Symbol("id");

    constructor(saldoInicial, tipoConta) {
        if (new.target === ContaBancaria) {
            throw new Error("ContaBancaria Ã© uma classe abstrata e nÃ£o pode ser instanciada.");
        }

        this.#saldo = saldoInicial;
        this._tipoConta = tipoConta;
        this[ContaBancaria.#idConta] = Math.floor(Math.random() * 10000);
    }

    // ðŸ”¹ Getter para acessar saldo
    get saldo() {
        return `Saldo atual: R$ ${this.#saldo.toFixed(2)}`;
    }

    // ðŸ”¹ Setter que impede atribuiÃ§Ã£o direta
    set saldo(valor) {
        throw new Error("NÃ£o Ã© possÃ­vel modificar o saldo diretamente!");
    }

    // ðŸ”¹ MÃ©todos protegidos (nÃ£o devem ser acessados diretamente)
    _atualizarSaldo(valor) {
        this.#saldo += valor;
    }

    // ðŸ”¹ MÃ©todos pÃºblicos
    depositar(valor) {
        if (valor <= 0) {
            console.log("DepÃ³sito deve ser maior que zero.");
            return;
        }
        this._atualizarSaldo(valor);
        console.log(`DepÃ³sito de R$ ${valor.toFixed(2)} realizado com sucesso.`);
    }

    sacar(valor) {
        if (valor <= 0) {
            console.log("O saque deve ser maior que zero.");
            return;
        }
        if (valor > this.#saldo) {
            console.log("Saldo insuficiente.");
            return;
        }
        this._atualizarSaldo(-valor);
        console.log(`Saque de R$ ${valor.toFixed(2)} realizado com sucesso.`);
    }

    verSaldo() {
        console.log(this.saldo);
    }

    // ðŸ”¹ MÃ©todo estÃ¡tico
    static tipoDeConta() {
        return "Conta BancÃ¡ria";
    }

    // ðŸ”¹ MÃ©todo para obter o ID da conta
    getIdConta() {
        return this[ContaBancaria.#idConta];
    }
}

// ðŸ”¹ ContaCorrente herdando ContaBancaria (com polimorfismo)
class ContaCorrente extends ContaBancaria {
    constructor(saldoInicial, limiteChequeEspecial) {
        super(saldoInicial, "Conta Corrente");
        this._limiteChequeEspecial = limiteChequeEspecial;
    }

    // ðŸ”¹ Sobrescrevendo mÃ©todo sacar (polimorfismo)
    sacar(valor) {
        if (valor <= 0) {
            console.log("O saque deve ser maior que zero.");
            return;
        }

        if (valor > (this._limiteChequeEspecial + this._saldo)) {
            console.log("Saldo insuficiente, mesmo com cheque especial.");
            return;
        }

        this._atualizarSaldo(-valor);
        console.log(`Saque de R$ ${valor.toFixed(2)} realizado com cheque especial.`);
    }

    // ðŸ”¹ MÃ©todo especÃ­fico da conta corrente
    aumentarLimite(valor) {
        if (valor > 0) {
            this._limiteChequeEspecial += valor;
            console.log(`Limite de cheque especial aumentado para R$ ${this._limiteChequeEspecial.toFixed(2)}`);
        } else {
            console.log("O valor deve ser positivo.");
        }
    }
}

// ðŸ”¹ ContaPoupanca herdando ContaBancaria (com polimorfismo)
class ContaPoupanca extends ContaBancaria {
    constructor(saldoInicial, taxaJuros) {
        super(saldoInicial, "Conta PoupanÃ§a");
        this._taxaJuros = taxaJuros;
    }

    // ðŸ”¹ MÃ©todo especÃ­fico da conta poupanÃ§a
    aplicarJuros() {
        const juros = (this._taxaJuros / 100) * this._saldo;
        this._atualizarSaldo(juros);
        console.log(`Juros de R$ ${juros.toFixed(2)} aplicados.`);
    }
}

// ðŸ”¹ Testes

console.log("=== Criando Contas ===");
const contaCorrente = new ContaCorrente(1000, 500);
const contaPoupanca = new ContaPoupanca(2000, 1.5);

console.log("\n=== DepÃ³sitos ===");
contaCorrente.depositar(500);
contaPoupanca.depositar(1000);

console.log("\n=== Saldos ===");
contaCorrente.verSaldo();
contaPoupanca.verSaldo();

console.log("\n=== Saques ===");
contaCorrente.sacar(2000); // Deve permitir saque com cheque especial
contaPoupanca.sacar(500);

console.log("\n=== AplicaÃ§Ã£o de Juros ===");
contaPoupanca.aplicarJuros();
contaPoupanca.verSaldo();

console.log("\n=== IDs das Contas ===");
console.log(`ID Conta Corrente: ${contaCorrente.getIdConta()}`);
console.log(`ID Conta PoupanÃ§a: ${contaPoupanca.getIdConta()}`);
